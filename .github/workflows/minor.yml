name: Deploy Beta NuGet Package to GitHub Packages

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '.github/workflows/develop.yml'

env:
  NUGET_SOURCE_NAME: 'seoka-design-agency'
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
  PACKAGE_OUTPUT_DIR: 'artifacts/packages'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET 8.x
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.11.0
      with:
        versionSpec: '5.x'
    
    - name: Run GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.11.0
      
    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
    
    - name: Process version
      id: sermv
      run: |
        echo "Processing version..."
        VERSION="${{ steps.gitversion.outputs.fullSemVer }}"
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "Pull request detected - skipping package publishing"
          echo "skip=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.9(-.*)?$ ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          SUFFIX="${BASH_REMATCH[3]:-}"
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0$SUFFIX"
          echo "Version $VERSION ends with .9 - incrementing to $NEW_VERSION"
          VERSION="$NEW_VERSION"
        else
          echo "Version $VERSION does not end with .9 - using as is."
        fi
        
        echo "Using version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "skip=false" >> $GITHUB_OUTPUT
    
    - name: Setup NuGet credentials
      if: steps.sermv.outputs.skip != 'true'
      run: |
        echo "Setting up NuGet credentials..."
        
        # Remove source if it exists
        dotnet nuget remove source "${{ env.NUGET_SOURCE_NAME }}" || true
        
        # Add source with current credentials
        dotnet nuget add source "${{ env.NUGET_SOURCE_URL }}" \
          --name "${{ env.NUGET_SOURCE_NAME }}" \
          --username "${{ github.repository_owner }}" \
          --password "${{ secrets.GITHUB_TOKEN }}" \
          --store-password-in-clear-text
        
        # Verify source was configured
        dotnet nuget list source
    
    - name: Restore dependencies
      if: steps.sermv.outputs.skip != 'true'
      run: dotnet restore --use-lock-file
    
    - name: Build solution
      if: steps.sermv.outputs.skip != 'true'
      run: dotnet build --no-restore -c Release
    
    - name: Create output directory
      if: steps.sermv.outputs.skip != 'true'
      run: mkdir -p ${{ env.PACKAGE_OUTPUT_DIR }}
    
    - name: Pack projects
      if: steps.sermv.outputs.skip != 'true'
      run: |
        echo "Packing projects with version ${{ steps.sermv.outputs.version }}"
        dotnet pack -c Release --no-build \
          -p:PackageVersion=${{ steps.sermv.outputs.version }} \
          -p:PackageOutputPath=${{ github.workspace }}/${{ env.PACKAGE_OUTPUT_DIR }} \
          -p:RepositoryUrl=https://github.com/${{ github.repository }} \
          -p:RepositoryType=git \
          -o ${{ github.workspace }}/${{ env.PACKAGE_OUTPUT_DIR }}
    
    - name: List generated packages
      if: steps.sermv.outputs.skip != 'true'
      run: ls -la ${{ github.workspace }}/${{ env.PACKAGE_OUTPUT_DIR }}
    
    - name: Publish to GitHub Packages
      if: steps.sermv.outputs.skip != 'true' && github.event_name == 'push'
      run: |
        echo "Publishing packages to GitHub Packages..."
        dotnet nuget push "${{ github.workspace }}/${{ env.PACKAGE_OUTPUT_DIR }}/*.nupkg" \
          --source "${{ env.NUGET_SOURCE_NAME }}" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate