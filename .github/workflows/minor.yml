name: Build and Publish Minor Release NuGet Packages

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '.github/workflows/develop.yml'

env:
  NUGET_SOURCE_NAME: 'seoka-design-agency'
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
  DOTNET_VERSION: '8.0.404'

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check-publish.outputs.should-publish }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Determine if should publish
      id: check-publish
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "should-publish=false" >> $GITHUB_OUTPUT
        else
          echo "should-publish=true" >> $GITHUB_OUTPUT
        fi

  determine-version:
    name: Determine Package Version
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      semver: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitVersion
      run: dotnet tool install GitVersion.Tool --version 5.12.0 --global

    - name: Execute GitVersion
      id: gitversion
      run: |
        VERSION=$(dotnet-gitversion /showvariable SemVer)
        echo "semVer=$VERSION" >> $GITHUB_OUTPUT

    - name: Process version
      id: version
      run: |
        VERSION="${{ steps.gitversion.outputs.semVer }}"
        
        if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.9(-.*)?$ ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          SUFFIX="${BASH_REMATCH[3]:-}"
          NEW_MINOR=$((MINOR + 1))
          VERSION="$MAJOR.$NEW_MINOR.0$SUFFIX"
          echo "Adjusted version to $VERSION"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build Solution
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

  package:
    name: Create NuGet Packages
    needs: [determine-version, build]
    if: needs.setup.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Pack projects individually
      run: |
        # Pack each project separately to isolate issues
        dotnet pack SDA.Common.Core/SDA.Common.Core.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          /p:Version=${{ needs.determine-version.outputs.semver }} \
          /p:RepositoryUrl=https://github.com/${{ github.repository }}
          
        dotnet pack SDA.Common.Services/SDA.Common.Services.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          /p:Version=${{ needs.determine-version.outputs.semver }} \
          /p:RepositoryUrl=https://github.com/${{ github.repository }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

  publish:
    name: Publish to GitHub Packages
    needs: package
    if: needs.setup.outputs.should-publish == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Setup NuGet credentials
      run: |
        dotnet nuget add source "${{ env.NUGET_SOURCE_URL }}" \
          --name "${{ env.NUGET_SOURCE_NAME }}" \
          --username "${{ github.repository_owner }}" \
          --password "${{ secrets.GITHUB_TOKEN }}" \
          --store-password-in-clear-text

    - name: Publish packages
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --source "${{ env.NUGET_SOURCE_NAME }}" \
          --api-key "${{ secrets.GITHUB_TOKEN }}" \
          --skip-duplicate