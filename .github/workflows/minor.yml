name: Deploy Beta NuGet Package

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    paths:
      - 'src/**'
      - '**/*.csproj'
      - '.github/workflows/develop.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for GitVersion to work properly
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    # Fix for the NuGet packaging issue by examining the project files
    - name: Check project structure
      run: |
        echo "Repository structure:"
        find . -type f -name "*.csproj" | sort
        
        echo "Content of a sample project file:"
        SAMPLE_PROJECT=$(find . -name "*.csproj" | head -1)
        if [ -n "$SAMPLE_PROJECT" ]; then
          cat "$SAMPLE_PROJECT"
        fi
    
    # Create the NuGet packages directory first to ensure it exists for caching
    - name: Create NuGet packages directory
      run: mkdir -p ~/.nuget/packages
    
    # Cache NuGet packages AFTER ensuring the directory exists
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.11.0
      with:
        versionSpec: '5.x'
    
    - name: Run GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.11.0
      
    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
    
    - name: Process version (Semantic Release Manager)
      id: sermv
      run: |
        echo "Processing version with sermv..."
        VERSION="${{ steps.gitversion.outputs.fullSemVer }}"
        
        # Skip early if pull request
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "Pull request detected - skipping package publishing"
          echo "skip=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if version ends with .9
        if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.9(-.*)?$ ]]; then
          # Extract major and minor versions
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          SUFFIX="${BASH_REMATCH[3]:-}"
          
          # Increment minor version and set patch to 0
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0$SUFFIX"
          
          echo "Version $VERSION ends with .9 - incrementing to $NEW_VERSION"
          VERSION="$NEW_VERSION"
        else
          echo "Version $VERSION does not end with .9 - using as is."
        fi
        
        echo "Using version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "skip=false" >> $GITHUB_OUTPUT
    
    - name: Setup NuGet credentials
      if: steps.sermv.outputs.skip != 'true'
      run: |
        echo "üîç Checking if NuGet source 'seoka-design-agency' already exists..."
        SOURCE_EXISTS=$(dotnet nuget list source | grep -c "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" || true)
        if [ "$SOURCE_EXISTS" -gt 0 ]; then
          echo "‚úÖ NuGet source 'seoka-design-agency' already exists. Skipping add."
        else
          echo "‚ûï Adding NuGet source 'seoka-design-agency'..."
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          --name "seoka-design-agency" \
          --username "${{ github.repository_owner }}" \
          --password "${{ secrets.GITHUB_TOKEN }}" \
          --store-password-in-clear-text
        fi
    
    - name: Restore dependencies
      if: steps.sermv.outputs.skip != 'true'
      run: dotnet restore --use-lock-file
    
    - name: Build
      if: steps.sermv.outputs.skip != 'true'
      run: dotnet build --no-restore -c Release
    
    - name: Pack projects
      if: steps.sermv.outputs.skip != 'true'
      run: |
        # Create output directory
        mkdir -p out
        
        # Find all project files in the repository
        echo "Finding all .csproj files to pack..."
        PROJECT_FILES=$(find . -name "*.csproj" -not -path "*/\.*")
        
        # Pack each project with specific NuGet properties to fix path issues
        for PROJECT in $PROJECT_FILES
        do
          echo "Packing $PROJECT with version ${{ steps.sermv.outputs.version }}"
          dotnet pack "$PROJECT" -c Release --no-build \
            -p:PackageVersion=${{ steps.sermv.outputs.version }} \
            -p:NuspecOutputPath="$GITHUB_WORKSPACE/out" \
            -p:OutputPath="$GITHUB_WORKSPACE/out" \
            -o "$GITHUB_WORKSPACE/out"
        done
    
    - name: Publish to GitHub NuGet Feed
      if: steps.sermv.outputs.skip != 'true' && github.event_name == 'push'
      run: |
        for PACKAGE in out/*.nupkg
        do
          echo "Publishing $PACKAGE"
          dotnet nuget push "$PACKAGE" \
            --source "seoka-design-agency" \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
        done