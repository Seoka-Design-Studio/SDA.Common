name: Deploy Major Release NuGet Package
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "**/*.csproj"
      - ".github/workflows/major.yml"
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for GitVersion to work properly
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
          cache: true # Cache NuGet packages
          cache-dependency-path: '**/packages.lock.json'
          
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: "5.x"
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0
      - name: Process version (Semantic Release Manager)
        id: sermv
        run: |
          echo "Processing version with sermv..."
          VERSION="${{ steps.gitversion.outputs.fullSemVer }}"

          # Skip early if pull request
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Pull request detected - skipping package publishing"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if version ends with .9
          if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.9(-.*)?$ ]]; then
            # Extract major and minor versions
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            SUFFIX="${BASH_REMATCH[3]:-}"
            
            # Increment minor version and set patch to 0
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0$SUFFIX"
            
            echo "Version $VERSION ends with .9 - incrementing to $NEW_VERSION"
            VERSION="$NEW_VERSION"
          else
            echo "Version $VERSION does not end with .9 - using as is."
          fi

          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Setup NuGet credentials
        if: steps.sermv.outputs.skip != 'true'
        run: |
         echo "🔍 Checking if NuGet source 'seoka-design-agency' already exists..."
         SOURCE_EXISTS=$(dotnet nuget list source | grep -c "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json")
         
         if [ "$SOURCE_EXISTS" -gt 0 ]; then
          echo "✅ NuGet source 'seoka-design-agency' already exists. Skipping add."
          else
            echo "➕ Adding NuGet source 'seoka-design-agency'..."
            dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name "seoka-design-agency" \
            --username "${{ github.repository_owner }}" \
            --password "${{ secrets.NUGET_API_KEY }}" \
            --store-password-in-clear-text
            fi
      - name: Find project path
        id: find_path
        run: echo "path=$(find . -type f -name 'SDA.Common.Core.csproj')" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        if: steps.sermv.outputs.skip != 'true'
        run: dotnet restore --use-lock-file

      - name: Build and Pack
        if: steps.sermv.outputs.skip != 'true'
        run: |
          dotnet build  --no-restore
          dotnet pack -c Release --no-build -p:PackageVersion=${{ steps.sermv.outputs.version }} -o out
          
      - name: Publish to GitHub NuGet Feed
        if: steps.sermv.outputs.skip != 'true' && github.event_name == 'push'
        run: |
          dotnet nuget push "out/*.nupkg" \
            --source "seoka-design-agency" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate
